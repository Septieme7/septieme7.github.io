<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>BlueDaydream</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-08-30T15:04:51.182Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Septieme7</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python入门</title>
    <link href="http://yoursite.com/2019/08/30/Python%E5%85%A5%E9%97%A8/"/>
    <id>http://yoursite.com/2019/08/30/Python入门/</id>
    <published>2019-08-30T14:55:58.000Z</published>
    <updated>2019-08-30T15:04:51.182Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一周学习——Python环境搭建及基本数据类型"><a href="#第一周学习——Python环境搭建及基本数据类型" class="headerlink" title="第一周学习——Python环境搭建及基本数据类型"></a>第一周学习——Python环境搭建及基本数据类型</h1><h2 id="1-Pyhton环境搭建"><a href="#1-Pyhton环境搭建" class="headerlink" title="1.Pyhton环境搭建"></a>1.Pyhton环境搭建</h2><p><strong>以下为Windows系统（相信Linux大佬一定是会装的）</strong></p><ul><li>打开Web浏览器，访问Python安装包官网下载地址：<a href="https://link.jianshu.com/?t=https://www.python.org/downloads/" target="_blank" rel="noopener">https://www.python.org/downloads/</a></li><li>双击安装，一路next，在【选择路径】的步骤，把选好的路径复制黏贴下来，后面的配置要用到。</li><li>配置环境变量<br>(1) 【计算机】-【属性】-【高级系统设置】-【高级】-【环境变量】-【系统变量】-【Path】<br>(2)  编辑【Path】变量：把刚才复制的安装路径，加到它的结尾，要用英文分号和前面已有的内容隔开。<br>(3)  一路【确定】，完成。</li><li>检查是否安装成功<br>(1) 按键【Win】+【R】- 输入cmd - 打开命令行窗口<br>(2) 输入python - 【Enter】，显示Python版本信息，即安装成功。</li></ul><h2 id="2-Python中的基本数据类型"><a href="#2-Python中的基本数据类型" class="headerlink" title="2.Python中的基本数据类型"></a>2.Python中的基本数据类型</h2><h3 id="一、number类型"><a href="#一、number类型" class="headerlink" title="一、number类型"></a>一、number类型</h3><p>Python3 支持 <code>int</code>、<code>float</code>、<code>bool</code>、<code>complex</code>（复数）。</p><p>在Python 3里，只有一种整数类型 <code>int</code>，表示为长整型(-2^63-2^63)，没有 python2 中的 <code>Long</code></p><h4 id="1-int类型"><a href="#1-int类型" class="headerlink" title="1. int类型"></a>1. int类型</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">int</span><span class="params">(object)</span></span></span><br><span class="line"><span class="class"> |  <span class="title">int</span><span class="params">([x])</span> -&gt; integer</span></span><br><span class="line"><span class="class"> |  int(x, base=10) -&gt; integer</span></span><br><span class="line"><span class="class"> |  </span></span><br><span class="line"><span class="class"> |  Convert a number or string to an integer, or return 0 if no arguments</span></span><br><span class="line"><span class="class"> |  are given.  If x is a number, return x.__int__().  For floating point</span></span><br><span class="line"><span class="class"> |  numbers, this truncates towards zero.</span></span><br><span class="line"><span class="class"> |  </span></span><br><span class="line"><span class="class"> |  If x is not a number or if base is given, then x must be a string,</span></span><br><span class="line"><span class="class"> |  bytes, or bytearray instance representing an integer literal in the</span></span><br><span class="line"><span class="class"> |  given base.  The literal can be preceded by '+' or '-' and be surrounded</span></span><br><span class="line"><span class="class"> |  by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.</span></span><br><span class="line"><span class="class"> |  Base 0 means to interpret the base from the string as an integer literal.</span></span><br><span class="line"><span class="class"> |  &gt;&gt;&gt; int('0b100', base=0)</span></span><br><span class="line"><span class="class"> |  4</span></span><br><span class="line"><span class="class">    .....</span></span><br></pre></td></tr></table></figure><p>可知，创建 <code>int</code> 值有两种方式：</p><ul><li>直接赋予变量整数值</li><li>使用构造器 <code>int()</code> 创建 <code>int</code> 类型实例</li></ul><p>针对第二种方式，如果没有任何输入参数，那么创建 <code>int</code> 实例值为 <code>0</code></p><p>如果仅输入单个对象，可以输入一个数字，或者一个数字字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>int()</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>int(<span class="number">3</span>)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>int(‘<span class="number">122</span>’)</span><br><span class="line"><span class="number">122</span></span><br></pre></td></tr></table></figure><p>int()函数可以把实数类型转换为整数，并且是向下取整，也就是在数轴上向左取整</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>int(<span class="number">3.6</span>)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>int(<span class="number">3.4</span>)</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><p>可选参数 <code>base</code> 表示第一个参数值所属进制，默认为 <code>10</code>，表示输入值为十进制数，取值范围为 <code>0</code> 和 <code>[2, 36]</code></p><p>如果输入多个对象，即需要定义输入值的进制时，输入值类型应该为字符串 <code>str</code></p><p>在所有的进制中，<code>2-进制</code>，<code>8-进制</code> 和 <code>16-进制</code> 可以通过添加前缀 <code>0b/0B, 0o/0O，0x/0X</code> 的方式进行转换：</p><p>假如你想要通过调用init来进行有前缀的进制转换，则必须将<code>base</code>设置为0</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>int(<span class="string">'3333'</span>)</span><br><span class="line"><span class="number">3333</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>int(<span class="string">'3333'</span>, <span class="number">0</span>)</span><br><span class="line"><span class="number">3333</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>int(<span class="string">'0o333'</span>, <span class="number">0</span>)</span><br><span class="line"><span class="number">219</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>int(<span class="string">'0x3333'</span>, <span class="number">0</span>)</span><br><span class="line"><span class="number">13107</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#假如不将base设置为0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>int(<span class="string">'0x3333'</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">ValueError: invalid literal <span class="keyword">for</span> int() <span class="keyword">with</span> base <span class="number">10</span>: <span class="string">'0x3333'</span></span><br><span class="line">        </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>int(<span class="string">'0x2676'</span>,<span class="number">8</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">ValueError: invalid literal <span class="keyword">for</span> int() <span class="keyword">with</span> base <span class="number">8</span>: <span class="string">'0x2676'</span></span><br></pre></td></tr></table></figure><h4 id="2-float类型"><a href="#2-float类型" class="headerlink" title="2.float类型"></a>2.float类型</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">float</span><span class="params">(object)</span></span></span><br><span class="line"><span class="class"> |  <span class="title">float</span><span class="params">(x=<span class="number">0</span>, /)</span></span></span><br><span class="line"><span class="class"> |</span></span><br><span class="line"> |  Convert a string or number to a floating point number, if possible.</span><br></pre></td></tr></table></figure><p>浮点型（<code>float</code>）等同于 C 语言中的 <code>double</code> 类型</p><p>创建 <code>float</code> 值有两种方式：</p><ul><li><p>直接赋予变量整数值</p></li><li><p>使用构造器 float() 创建 <code>float</code> 类型实例</p><p>使用第一种方式，如果该数值没有小数，需要添加后缀 .0，否则，解释器会认为这是 int 类型数值，示例如下：</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">33</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(a)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">int</span>'&gt;</span></span><br><span class="line">&gt;&gt;&gt; a = 33.0</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(a)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">float</span>'&gt;</span></span><br></pre></td></tr></table></figure><p>使用第二种方式，如果没有任何输入参数，那么创建 <code>float</code> 实例值为 <code>0.0</code></p><p>也可以输入单个参数，一个数值或者一个数字字符串，示例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>float()</span><br><span class="line"><span class="number">0.0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = float(<span class="number">33</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line"><span class="number">33.0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = float(<span class="string">'222.3'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c</span><br><span class="line"><span class="number">222.3</span></span><br></pre></td></tr></table></figure><p><strong>使用 float() 构造器还可以定义无穷大（Infinity 或者 inf）和无穷小</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = float(<span class="string">"inf"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = float(<span class="string">"-inf"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">inf</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line">-inf</span><br></pre></td></tr></table></figure><p>为了测试这些值的存在，使用 <code>math.isinf()</code> 进行判断：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> math</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>math.isinf(a)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>math.isinf(b)</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><p><strong>无穷大数在执行数学计算的时候会传播</strong></p><p>这个就类似于数学中讲述的，无穷大加上一个常数还是无穷大，无穷大与无穷大相等：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = float(<span class="string">'inf'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a + <span class="number">45</span></span><br><span class="line">inf</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a * <span class="number">10</span></span><br><span class="line">inf</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">10</span> / a</span><br><span class="line"><span class="number">0.0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>float(<span class="string">"inf"</span>) == float(<span class="string">"inf"</span>)</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><p>无穷大在比较中比任何一个数都要大。</p><p><em>问题：但如果我们将无穷大与无穷小相加呢？</em></p><p>有些操作时未定义的并会返回一个 <code>NaN</code> 结果:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = float(<span class="string">'inf'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a/a</span><br><span class="line">nan</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = float(<span class="string">'-inf'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a + b</span><br><span class="line">nan</span><br></pre></td></tr></table></figure><p><code>nan</code> 值在所有操作中也会传播，并且不会产生异常：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = float(<span class="string">'nan'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c + <span class="number">23</span></span><br><span class="line">nan</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c / <span class="number">2</span></span><br><span class="line">nan</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c * <span class="number">2</span></span><br><span class="line">nan</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>math.sqrt(c)</span><br><span class="line">nan</span><br></pre></td></tr></table></figure><p>使用 <code>math.isnan()</code> 可以判断值是否是 <code>NaN</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>math.isnan(c)</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><p><code>nan</code> 值的任何比较操作都是返回 <code>False</code> ：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>float(<span class="string">"nan"</span>) == float(<span class="string">"nan"</span>)</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c &gt; <span class="number">3</span></span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure><p><strong>更安全的类型转换</strong></p><p>由于无穷的存在，因此字符串装浮点数就存在的一些例外，并且这个转换过程不会抛出异常。如果程序员们想改变 python 的默认行为，可以使用 <code>fpectl</code> 模块，但是它在标准的Python 构建中并没有被启用。还有一个比较简单的转换，就是加一个 <code>isdigit()</code> 判断（用于检测字符串是否仅有数字组成）:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">str2float</span><span class="params">(ss)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> ss.isdigit():</span><br><span class="line">        <span class="keyword">raise</span> ValueError</span><br><span class="line">    <span class="keyword">return</span> float(ss)</span><br><span class="line">    </span><br><span class="line">sss = <span class="string">"inf"</span></span><br><span class="line"></span><br><span class="line">a = str2float(sss)</span><br></pre></td></tr></table></figure><h4 id="3-bool类型"><a href="#3-bool类型" class="headerlink" title="3.bool类型"></a>3.bool类型</h4><p>Python中的布尔类型有两个常量True和False表示。</p><h6 id="布尔值转化"><a href="#布尔值转化" class="headerlink" title="布尔值转化"></a>布尔值转化</h6><p>Python中的布尔值是可以转化为数值的，True表示1，而False表示0，可以对其进行数值运算，但不建议这么做，会引起代码的混乱。</p><h6 id="真值测试"><a href="#真值测试" class="headerlink" title="真值测试"></a>真值测试</h6><p>在Python中所有的对象都可以进行真值测试，下面罗列一下判断为假的情况：</p><ul><li>None</li><li>False</li><li>数值中的零，包括0，0.0，0j（虚数）</li><li>空序列，包括空字符串(”)，空元组(())，空列表([])</li><li>空的字典{}</li><li>自定义的对象的实例，该对象的<strong>bool</strong>方法返回False或者<strong>len</strong>方法返回0</li><li>除了以上的情况外，所有的对象在if或者while语句中的表现都为真。</li></ul><h6 id="布尔操作"><a href="#布尔操作" class="headerlink" title="布尔操作"></a>布尔操作</h6><p>在Python中布尔值可以进行或、且、否三种操作，与很多语言不同的是，Python中不是用符号，而是用英文单词来表示，分别是or、and和not。</p><p>需要注意的是or和and都支持短路操作，如果or的左边返回True，则右边就不会判断；同理如果and左边返回False，右边也不会进行判断。</p><p>not的优先级很低，not a == b表示的是not (a == b)，而表达式a == not b会直接报错，需要加括号a == (not b)。</p><h6 id="比较操作"><a href="#比较操作" class="headerlink" title="比较操作"></a>比较操作</h6><p>通过比较操作会返回布尔类型的值。除了普通的比较操作外，Python还支持is操作来判断两个对象是否是同一个对象，下面是Python支持的所有的比较操作：</p><table><thead><tr><th>操作符</th><th>解释</th></tr></thead><tbody><tr><td>&lt;</td><td>小于</td></tr><tr><td>&lt;=</td><td>小于等于</td></tr><tr><td>&gt;</td><td>大于</td></tr><tr><td>&gt;=</td><td>大于等于</td></tr><tr><td>==</td><td>等于</td></tr><tr><td>!=</td><td>不等于</td></tr><tr><td>is</td><td>是相同对象</td></tr><tr><td>is not</td><td>是不同对象</td></tr></tbody></table><p>其他操作比较常见，给出一些is的用法示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="literal">None</span></span><br><span class="line">b = <span class="literal">None</span></span><br><span class="line"><span class="comment"># True，因为None只有唯一实例</span></span><br><span class="line">r = a <span class="keyword">is</span> b</span><br><span class="line"></span><br><span class="line">a = <span class="string">"22"</span></span><br><span class="line">b = <span class="string">"22"</span></span><br><span class="line"><span class="comment"># True，直接声明的相同字符串也会指向同一个实例</span></span><br><span class="line">r = a <span class="keyword">is</span> b</span><br><span class="line"></span><br><span class="line">a = [<span class="number">1</span>]</span><br><span class="line">b = [<span class="number">1</span>]</span><br><span class="line"><span class="comment"># False，相等但不是同一个实例</span></span><br><span class="line">r = a <span class="keyword">is</span> b</span><br><span class="line"></span><br><span class="line">a = [<span class="number">1</span>]</span><br><span class="line">b = a</span><br><span class="line">c = a</span><br><span class="line"><span class="comment"># True，指向同一个实例</span></span><br><span class="line">r = b <span class="keyword">is</span> c</span><br></pre></td></tr></table></figure><h4 id="4-complex类型"><a href="#4-complex类型" class="headerlink" title="4.complex类型"></a>4.complex类型</h4><p>Python还支持复数，复数由实数部分和虚数部分构成，可以用a + bj,或者complex(a,b)表示， 复数的实部a和虚部b都是浮点型</p><h4 id="5-运算符"><a href="#5-运算符" class="headerlink" title="5.运算符"></a>5.运算符</h4><table><thead><tr><th align="left">算术运算符</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">+</td><td align="left">加 - 两个对象相加</td><td align="left">a + b 输出结果 30</td></tr><tr><td align="left">-</td><td align="left">减 - 得到负数或是一个数减去另一个数</td><td align="left">a - b 输出结果 -10</td></tr><tr><td align="left">*</td><td align="left">乘 - 两个数相乘或是返回一个被重复若干次的字符串</td><td align="left">a * b 输出结果 200</td></tr><tr><td align="left">/</td><td align="left">除 - x除以y</td><td align="left">b / a 输出结果 2</td></tr><tr><td align="left">%</td><td align="left">取模 - 返回除法的余数</td><td align="left">b % a 输出结果 0</td></tr><tr><td align="left">**</td><td align="left">幂 - 返回x的y次幂</td><td align="left">a**b 为10的20次方， 输出结果 100000000000000000000</td></tr><tr><td align="left">//</td><td align="left">取整除 - 返回商的整数部分（<strong>向下取整</strong>）</td><td align="left">&gt;&gt;&gt; 9//2 4 &gt;&gt;&gt; -9//2 -5</td></tr></tbody></table><table><thead><tr><th align="left">比较运算符</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">==</td><td align="left">等于 - 比较对象是否相等</td><td align="left">(a == b) 返回 False。</td></tr><tr><td align="left">!=</td><td align="left">不等于 - 比较两个对象是否不相等</td><td align="left">(a != b) 返回 true.</td></tr><tr><td align="left">&lt;&gt;</td><td align="left">不等于 - 比较两个对象是否不相等</td><td align="left">(a &lt;&gt; b) 返回 true。这个运算符类似 != 。</td></tr><tr><td align="left">&gt;</td><td align="left">大于 - 返回x是否大于y</td><td align="left">(a &gt; b) 返回 False。</td></tr><tr><td align="left">&lt;</td><td align="left">小于 - 返回x是否小于y。所有比较运算符返回1表示真，返回0表示假。这分别与特殊的变量True和False等价。</td><td align="left">(a &lt; b) 返回 true。</td></tr><tr><td align="left">&gt;=</td><td align="left">大于等于    - 返回x是否大于等于y。</td><td align="left">(a &gt;= b) 返回 False。</td></tr><tr><td align="left">&lt;=</td><td align="left">小于等于 -    返回x是否小于等于y。</td><td align="left">(a &lt;= b) 返回 true。</td></tr></tbody></table><table><thead><tr><th align="left">赋值运算符</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">=</td><td align="left">简单的赋值运算符</td><td align="left">c = a + b 将 a + b 的运算结果赋值为 c</td></tr><tr><td align="left">+=</td><td align="left">加法赋值运算符</td><td align="left">c += a 等效于 c = c + a</td></tr><tr><td align="left">-=</td><td align="left">减法赋值运算符</td><td align="left">c -= a 等效于 c = c - a</td></tr><tr><td align="left">*=</td><td align="left">乘法赋值运算符</td><td align="left">c *= a 等效于 c = c * a</td></tr><tr><td align="left">/=</td><td align="left">除法赋值运算符</td><td align="left">c /= a 等效于 c = c / a</td></tr><tr><td align="left">%=</td><td align="left">取模赋值运算符</td><td align="left">c %= a 等效于 c = c % a</td></tr><tr><td align="left">**=</td><td align="left">幂赋值运算符</td><td align="left">c *<em>= a 等效于 c = c *</em> a</td></tr><tr><td align="left">//=</td><td align="left">取整除赋值运算符</td><td align="left">c //= a 等效于 c = c // a</td></tr></tbody></table><table><thead><tr><th align="left">位运算符</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">&amp;</td><td align="left">按位与运算符：参与运算的两个值,如果两个相应位都为1,则该位的结果为1,否则为0</td><td align="left">(a &amp; b) 输出结果 12 ，二进制解释： 0000 1100</td></tr><tr><td align="left">|</td><td align="left">按位或运算符：只要对应的二个二进位有一个为1时，结果位就为1。</td><td align="left">(a | b) 输出结果 61 ，二进制解释： 0011 1101</td></tr><tr><td align="left">^</td><td align="left">按位异或运算符：当两对应的二进位相异时，结果为1</td><td align="left">(a ^ b) 输出结果 49 ，二进制解释： 0011 0001</td></tr><tr><td align="left">~</td><td align="left">按位取反运算符：对数据的每个二进制位取反,即把1变为0,把0变为1 。<strong>~x</strong> 类似于 <strong>-x-1</strong></td><td align="left">(~a ) 输出结果 -61 ，二进制解释： 1100 0011，在一个有符号二进制数的补码形式。</td></tr><tr><td align="left">&lt;&lt;</td><td align="left">左移动运算符：运算数的各二进位全部左移若干位，由 <strong>&lt;&lt;</strong> 右边的数字指定了移动的位数，高位丢弃，低位补0。</td><td align="left">a &lt;&lt; 2 输出结果 240 ，二进制解释： 1111 0000</td></tr><tr><td align="left">&gt;&gt;</td><td align="left">右移动运算符：把”&gt;&gt;”左边的运算数的各二进位全部右移若干位，<strong>&gt;&gt;</strong> 右边的数字指定了移动的位数</td><td align="left">a &gt;&gt; 2 输出结果 15 ，二进制解释： 0000 1111</td></tr></tbody></table><table><thead><tr><th align="left">赋值运算符</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">=</td><td align="left">简单的赋值运算符</td><td align="left">c = a + b 将 a + b 的运算结果赋值为 c</td></tr><tr><td align="left">+=</td><td align="left">加法赋值运算符</td><td align="left">c += a 等效于 c = c + a</td></tr><tr><td align="left">-=</td><td align="left">减法赋值运算符</td><td align="left">c -= a 等效于 c = c - a</td></tr><tr><td align="left">*=</td><td align="left">乘法赋值运算符</td><td align="left">c *= a 等效于 c = c * a</td></tr><tr><td align="left">/=</td><td align="left">除法赋值运算符</td><td align="left">c /= a 等效于 c = c / a</td></tr><tr><td align="left">%=</td><td align="left">取模赋值运算符</td><td align="left">c %= a 等效于 c = c % a</td></tr><tr><td align="left">**=</td><td align="left">幂赋值运算符</td><td align="left">c *<em>= a 等效于 c = c *</em> a</td></tr><tr><td align="left">//=</td><td align="left">取整除赋值运算符</td><td align="left">c //= a 等效于 c = c // a</td></tr></tbody></table><h3 id="二、字符串类型"><a href="#二、字符串类型" class="headerlink" title="二、字符串类型"></a>二、字符串类型</h3><h4 id="1-字符串拼接"><a href="#1-字符串拼接" class="headerlink" title="1.字符串拼接"></a>1.字符串拼接</h4><h6 id="1、来自C语言的-方式"><a href="#1、来自C语言的-方式" class="headerlink" title="1、来自C语言的%方式"></a>1、来自C语言的%方式</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'%s %s'</span> % (<span class="string">'Hello'</span>, <span class="string">'world'</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Hello world</span><br></pre></td></tr></table></figure><p>%号格式化字符串的方式继承自古老的C语言，这在很多编程语言都有类似的实现。上例的%s是一个占位符，它仅代表一段字符串，并不是拼接的实际内容。实际的拼接内容在一个单独的%号后面，放在一个元组里。</p><p>类似的占位符还有：%d（代表一个整数）、%f（代表一个浮点数）、%x（代表一个16进制数），等等。%占位符既是这种拼接方式的特点，同时也是其限制，因为每种占位符都有特定意义，实际使用起来太麻烦了。</p><h6 id="2、format-拼接方式"><a href="#2、format-拼接方式" class="headerlink" title="2、format()拼接方式"></a>2、format()拼接方式</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 简洁版</span></span><br><span class="line">s1 = <span class="string">'Hello &#123;&#125;! My name is &#123;&#125;.'</span>.format(<span class="string">'World'</span>, <span class="string">'Python猫'</span>)</span><br><span class="line">print(s1)</span><br><span class="line">&gt;&gt;&gt;Hello World! My name <span class="keyword">is</span> Python猫.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对号入座版</span></span><br><span class="line">s2 = <span class="string">'Hello &#123;0&#125;! My name is &#123;1&#125;.'</span>.format(<span class="string">'World'</span>, <span class="string">'Python猫'</span>)</span><br><span class="line">s3 = <span class="string">'Hello &#123;name1&#125;! My name is &#123;name2&#125;.'</span>.format(name1=<span class="string">'World'</span>, name2=<span class="string">'Python猫'</span>)</span><br><span class="line">print(s2)</span><br><span class="line">&gt;&gt;&gt;Hello World! My name <span class="keyword">is</span> Python猫.</span><br><span class="line">print(s3)</span><br><span class="line">&gt;&gt;&gt;Hello World! My name <span class="keyword">is</span> Python猫.</span><br></pre></td></tr></table></figure><p>这种方式使用花括号{}做占位符，在format方法中再转入实际的拼接值。容易看出，它实际上是对%号拼接方式的改进。这种方式在Python2.6中开始引入。</p><p>上例中，简洁版的花括号中无内容，缺点是容易弄错次序。对号入座版主要有两种，一种传入序列号，一种则使用key-value的方式，更加直观。</p><h6 id="3、直接拼接"><a href="#3、直接拼接" class="headerlink" title="3、直接拼接"></a>3、直接拼接</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">s_tuple = (<span class="string">'Hello'</span>, <span class="string">' '</span>, <span class="string">'world'</span>)</span><br><span class="line">s_like_tuple = (<span class="string">'Hello'</span> <span class="string">' '</span> <span class="string">'world'</span>)</span><br><span class="line"></span><br><span class="line">print(s_tuple) </span><br><span class="line">&gt;&gt;&gt;(<span class="string">'Hello'</span>, <span class="string">' '</span>, <span class="string">'world'</span>)</span><br><span class="line">print(s_like_tuple) </span><br><span class="line">&gt;&gt;&gt;Hello world</span><br><span class="line"></span><br><span class="line">type(s_like_tuple) &gt;&gt;&gt;str</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 多元素时，不支持有变量</span></span><br><span class="line">str_1 = <span class="string">'Hello'</span></span><br><span class="line">str_2 = (str_1 <span class="string">'world'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>SyntaxError: invalid syntax</span><br><span class="line">str_3 = (str_1 str_1)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>SyntaxError: invalid syntax</span><br><span class="line"><span class="comment"># 但是下面写法不会报错</span></span><br><span class="line">str_4 = (str_1)</span><br></pre></td></tr></table></figure><h6 id="4、面向对象模板拼接"><a href="#4、面向对象模板拼接" class="headerlink" title="4、面向对象模板拼接"></a>4、面向对象模板拼接</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> Template</span><br><span class="line">s = Template(<span class="string">'$&#123;s1&#125; $&#123;s2&#125;!'</span>) </span><br><span class="line">print(s.safe_substitute(s1=<span class="string">'Hello'</span>,s2=<span class="string">'world'</span>)) </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Hello world!</span><br></pre></td></tr></table></figure><p>这种方法就十分麻烦且不优雅了</p><h6 id="5、常用的-号方式"><a href="#5、常用的-号方式" class="headerlink" title="5、常用的+号方式"></a>5、常用的+号方式</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">str_1 = <span class="string">'Hello world！ '</span> </span><br><span class="line">str_2 = <span class="string">'My name is Python猫.'</span></span><br><span class="line">print(str_1 + str_2)</span><br><span class="line">&gt;&gt;&gt;Hello world！ My name <span class="keyword">is</span> Python猫.</span><br><span class="line">print(str_1)</span><br><span class="line">&gt;&gt;&gt;Hello world！</span><br></pre></td></tr></table></figure><p>这种方式最常用、直观、易懂，是入门级的实现方式。但是，它也存在两处让人容易犯错的地方。</p><p>字符串是不可变类型，新的字符串会独占一块新的内存，而原来的字符串保持不变。上例中，拼接前有两段字符串，拼接后实际有三段字符串。</p><p>有种说法是当拼接次数不超过3时，使用+号连接符就会比其它方式快（ps：不少Python教程都是如此建议），但这没有任何合理根据。</p><p>事实上，在拼接短的字面值时，由于CPython中的 <code>常数折叠</code> （constant folding）功能，这些字面值会被转换成更短的形式，例如’a’+’b’+’c’ 被转换成’abc’，’hello’+’world’也会被转换成’hello world’。这种转换是在编译期完成的，而到了运行期时就不会再发生任何拼接操作，因此会加快整体计算的速度。</p><p>常数折叠优化有一个限度，它要求拼接结果的长度不超过20。所以，<strong>当拼接的最终字符串长度不超过20时，+号操作符的方式，会比后面提到的join等方式快得多，这与+号的使用次数无关。</strong></p><h6 id="6、join-拼接方式"><a href="#6、join-拼接方式" class="headerlink" title="6、join()拼接方式"></a>6、join()拼接方式</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">str_list = [<span class="string">'Hello'</span>, <span class="string">'world'</span>]</span><br><span class="line">str_join1 = <span class="string">' '</span>.join(str_list)</span><br><span class="line">str_join2 = <span class="string">'-'</span>.join(str_list)</span><br><span class="line">print(str_join1) &gt;&gt;&gt;Hello world</span><br><span class="line">print(str_join2) &gt;&gt;&gt;Hello-world</span><br></pre></td></tr></table></figure><p>str对象自带的join()方法，接受一个序列参数，可以实现拼接。拼接时，元素若不是字符串，需要先转换一下。可以看出，这种方法比较适用于连接序列对象中（例如列表）的元素，并设置统一的间隔符。</p><p>当拼接长度超过20时，这种方式基本上是首选。不过，它的缺点就是，不适合进行零散片段的、不处于序列集合的元素拼接。</p><h6 id="7、f-string方式"><a href="#7、f-string方式" class="headerlink" title="7、f-string方式"></a>7、f-string方式</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">'world'</span></span><br><span class="line">myname = <span class="string">'python_cat'</span></span><br><span class="line">words = <span class="string">f'Hello <span class="subst">&#123;name&#125;</span>. My name is <span class="subst">&#123;myname&#125;</span>.'</span></span><br><span class="line">print(words)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Hello world. My name <span class="keyword">is</span> python_cat.</span><br></pre></td></tr></table></figure><p>f-string方式出自PEP 498<code>Literal String Interpolation</code>，从Python3.6版本引入。其特点是在字符串前加 f 标识，字符串中间则用花括号{}包裹其它字符串变量。</p><p>这种方式在可读性上秒杀format()方式，处理长字符串的拼接时，速度与join()方法相当。</p><p>总结一下，我们前面说的“字符串拼接”，其实是从结果上理解。若从实现原理上划分的话，我们可以将这些方法划分出三种类型：</p><ul><li>格式化类：%、format()、template</li><li>拼接类：+、()、join()</li><li>插值类：f-string</li></ul><h4 id="2-切片"><a href="#2-切片" class="headerlink" title="2.切片"></a>2.切片</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># str[beg:end]</span></span><br><span class="line"><span class="comment"># （下标从 0 开始）从下标为beg开始算起，切取到下标为 end-1 的元素，切取的区间为 [beg, end)</span></span><br><span class="line">str = <span class="string">' python str '</span></span><br><span class="line"><span class="keyword">print</span> str[<span class="number">3</span>:<span class="number">6</span>]    <span class="comment"># tho</span></span><br><span class="line"><span class="comment"># str[beg:end:step]</span></span><br><span class="line"><span class="comment"># 取 [beg, end) 之间的元素，每隔 step 个取一个</span></span><br><span class="line"><span class="keyword">print</span> str[<span class="number">2</span>:<span class="number">7</span>:<span class="number">2</span>]  <span class="comment"># yhn</span></span><br></pre></td></tr></table></figure><h4 id="3-原始字符串"><a href="#3-原始字符串" class="headerlink" title="3.原始字符串"></a>3.原始字符串</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在字符串前加 r/R</span></span><br><span class="line"><span class="comment"># 所有的字符串都是直接按照字面的意思来使用，没有转义特殊或不能打印的字符</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">r'\n'</span>   <span class="comment"># \n</span></span><br></pre></td></tr></table></figure><h4 id="4-字符串重复"><a href="#4-字符串重复" class="headerlink" title="4.字符串重复"></a>4.字符串重复</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># str * n, n * str</span></span><br><span class="line"><span class="comment"># n 为一个 int 数字</span></span><br><span class="line">str = <span class="string">"hi"</span></span><br><span class="line"><span class="keyword">print</span> str*<span class="number">2</span>   <span class="comment"># hihi</span></span><br><span class="line"><span class="keyword">print</span> <span class="number">2</span>*str   <span class="comment"># hihi</span></span><br></pre></td></tr></table></figure><h4 id="5-in"><a href="#5-in" class="headerlink" title="5.in"></a>5.in</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">str = <span class="string">' python'</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'p'</span> <span class="keyword">in</span> str    <span class="comment"># True</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'py'</span> <span class="keyword">in</span> str   <span class="comment"># True</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'py'</span> <span class="keyword">not</span> <span class="keyword">in</span> str <span class="comment"># False</span></span><br></pre></td></tr></table></figure><h4 id="6-字符串常用函数"><a href="#6-字符串常用函数" class="headerlink" title="6.字符串常用函数"></a>6.字符串常用函数</h4><h5 id="去空格"><a href="#去空格" class="headerlink" title="去空格"></a>去空格</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">str = <span class="string">' python str '</span></span><br><span class="line"><span class="keyword">print</span> str</span><br><span class="line"><span class="comment"># 去首尾空格</span></span><br><span class="line"><span class="keyword">print</span> str.strip()</span><br><span class="line"><span class="comment"># 去左侧空格</span></span><br><span class="line"><span class="keyword">print</span> str.lstrip()</span><br><span class="line"><span class="comment"># 去右侧空格</span></span><br><span class="line"><span class="keyword">print</span> str.rstrip()</span><br></pre></td></tr></table></figure><h5 id="分隔字符串"><a href="#分隔字符串" class="headerlink" title="分隔字符串"></a>分隔字符串</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">str = <span class="string">' 1 , 2 , 3 , 4 , 5 , '</span></span><br><span class="line"><span class="comment"># 默认使用空格分隔</span></span><br><span class="line"><span class="keyword">print</span> str.split()   <span class="comment"># ['1', ',', '2', ',', '3', ',', '4', ',', '5', ',']</span></span><br><span class="line"><span class="comment"># 指定使用空格进行分隔，首尾如果有空格，则会出现在结果中</span></span><br><span class="line"><span class="keyword">print</span> str.split(<span class="string">' '</span>) <span class="comment"># ['', '1', ',', '2', ',', '3', ',', '4', ',', '5', ',', '']</span></span><br><span class="line"><span class="comment"># 指定其他字符串进行分隔</span></span><br><span class="line"><span class="keyword">print</span> str.split(<span class="string">','</span>) <span class="comment"># [' 1 ', ' 2 ', ' 3 ', ' 4 ', ' 5 ', ' ']</span></span><br><span class="line"><span class="keyword">print</span> str.split(<span class="string">'3 ,'</span>) <span class="comment"># [' 1 , 2 , ', ' 4 , 5 , ']</span></span><br><span class="line">str = <span class="string">'mississippi'</span></span><br><span class="line"><span class="keyword">print</span> str.rstrip(<span class="string">'ip'</span>)</span><br><span class="line"><span class="comment"># 取行, python 中把 "\r"，"\n"，"\r\n"，作为行分隔符</span></span><br><span class="line">str = <span class="string">'ab c\n\nde fg\rkl\r\n'</span></span><br><span class="line"><span class="keyword">print</span> str.splitlines()      <span class="comment"># ['ab c', '', 'de fg', 'kl']</span></span><br><span class="line"><span class="keyword">print</span> str.splitlines(<span class="literal">True</span>)  <span class="comment"># ['ab c\n', '\n', 'de fg\r', 'kl\r\n']</span></span><br></pre></td></tr></table></figure><h5 id="拼接字符串"><a href="#拼接字符串" class="headerlink" title="拼接字符串"></a>拼接字符串</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># str.join()方法用于将序列中的元素以指定的字符连接生成一个新的字符串。</span></span><br><span class="line">str = <span class="string">'-'</span></span><br><span class="line">seq = (<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>); <span class="comment"># 字符串序列</span></span><br><span class="line"><span class="keyword">print</span> str.join(seq)  <span class="comment"># 'a-b-c'</span></span><br></pre></td></tr></table></figure><h5 id="统计字符串里某个字符出现的次数"><a href="#统计字符串里某个字符出现的次数" class="headerlink" title="统计字符串里某个字符出现的次数"></a>统计字符串里某个字符出现的次数</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># str.count(sub, start= 0,end=len(string))</span></span><br><span class="line">str = <span class="string">"thing example....wow!!!"</span></span><br><span class="line"><span class="keyword">print</span> str.count(<span class="string">'i'</span>, <span class="number">0</span>, <span class="number">5</span>)  <span class="comment"># 1</span></span><br><span class="line"><span class="keyword">print</span> str.count(<span class="string">'e'</span>)  <span class="comment"># 2</span></span><br></pre></td></tr></table></figure><h5 id="检测字符串中是否包含子字符串"><a href="#检测字符串中是否包含子字符串" class="headerlink" title="检测字符串中是否包含子字符串"></a>检测字符串中是否包含子字符串</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># str.find(str, beg=0, end=len(string))</span></span><br><span class="line"><span class="comment"># 如果包含子字符串返回开始的索引值，否则返回-1。</span></span><br><span class="line">str1 = <span class="string">"this is string example....wow!!!"</span></span><br><span class="line">str2 = <span class="string">"exam"</span></span><br><span class="line"><span class="keyword">print</span> str1.find(str2)      <span class="comment"># 15</span></span><br><span class="line"><span class="keyword">print</span> str1.find(str2, <span class="number">10</span>)  <span class="comment"># 15</span></span><br><span class="line"><span class="keyword">print</span> str1.find(str2, <span class="number">40</span>)  <span class="comment"># -1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># str.index(str, beg=0, end=len(string))</span></span><br><span class="line"><span class="comment"># 如果包含子字符串返回开始的索引值，否则抛出异常。</span></span><br><span class="line"><span class="keyword">print</span> str1.index(str2)     <span class="comment"># 15</span></span><br><span class="line"><span class="keyword">print</span> str1.index(str2, <span class="number">10</span>) <span class="comment"># 15</span></span><br><span class="line"><span class="keyword">print</span> str1.index(str2, <span class="number">40</span>)</span><br><span class="line"><span class="comment"># Traceback (most recent call last):</span></span><br><span class="line"><span class="comment">#   File "test.py", line 8, in</span></span><br><span class="line"><span class="comment">#   print str1.index(str2, 40);</span></span><br><span class="line"><span class="comment">#   ValueError: substring not found</span></span><br><span class="line"><span class="comment"># shell returned 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># str.rfind(str, beg=0, end=len(string))</span></span><br><span class="line"><span class="comment"># str.rindex(str, beg=0, end=len(string))</span></span><br></pre></td></tr></table></figure><h5 id="判断字符串是否以指定前缀、后缀结尾"><a href="#判断字符串是否以指定前缀、后缀结尾" class="headerlink" title="判断字符串是否以指定前缀、后缀结尾"></a>判断字符串是否以指定前缀、后缀结尾</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># str.startswith(str, beg=0,end=len(string))</span></span><br><span class="line"><span class="comment"># 检查字符串以指定子字符串开头，如果是则返回 True，否则返回 False</span></span><br><span class="line">str = <span class="string">"this is string example....wow!!!"</span></span><br><span class="line"><span class="keyword">print</span> str.startswith( <span class="string">'this'</span> );       <span class="comment"># True</span></span><br><span class="line"><span class="keyword">print</span> str.startswith( <span class="string">'is'</span>, <span class="number">2</span>, <span class="number">4</span> )    <span class="comment"># True</span></span><br><span class="line"><span class="keyword">print</span> str.startswith( <span class="string">'this'</span>, <span class="number">2</span>, <span class="number">4</span> )  <span class="comment"># False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># str.endswith(suffix[, start[, end]])</span></span><br><span class="line"><span class="comment"># 以指定后缀结尾返回True，否则返回False</span></span><br><span class="line">suffix = <span class="string">"wow!!!"</span></span><br><span class="line"><span class="keyword">print</span> str.endswith(suffix);         <span class="comment"># True</span></span><br><span class="line"><span class="keyword">print</span> str.endswith(suffix,<span class="number">20</span>);      <span class="comment"># True</span></span><br><span class="line">suffix = <span class="string">"is"</span>;</span><br><span class="line"><span class="keyword">print</span> str.endswith(suffix, <span class="number">2</span>, <span class="number">4</span>);   <span class="comment"># True</span></span><br><span class="line"><span class="keyword">print</span> str.endswith(suffix, <span class="number">2</span>, <span class="number">6</span>);   <span class="comment"># False</span></span><br></pre></td></tr></table></figure><h5 id="根据指定的分隔符将字符串进行分割"><a href="#根据指定的分隔符将字符串进行分割" class="headerlink" title="根据指定的分隔符将字符串进行分割"></a>根据指定的分隔符将字符串进行分割</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># str.partition(del)</span></span><br><span class="line"><span class="comment"># 返回一个3元的元组，第一个为分隔符左边的子串，第二个为分隔符本身，第三个为分隔符右边的子串。</span></span><br><span class="line">str = <span class="string">"http://www.baidu.com/"</span></span><br><span class="line"><span class="keyword">print</span> str.partition(<span class="string">"://"</span>)   <span class="comment"># ('http', '://', 'www.baidu.com/')</span></span><br><span class="line"><span class="comment"># string.rpartition(str)   从右边开始</span></span><br></pre></td></tr></table></figure><h5 id="替换字符串"><a href="#替换字符串" class="headerlink" title="替换字符串"></a>替换字符串</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># str.replace(old, new[, max])</span></span><br><span class="line"><span class="comment"># 字符串中的 old（旧字符串） 替换成 new(新字符串)，如果指定第三个参数max，则替换不超过 max 次。</span></span><br><span class="line">str = <span class="string">"thing example....wow!!! thisslly string"</span>;</span><br><span class="line"><span class="keyword">print</span> str.replace(<span class="string">"is"</span>, <span class="string">"was"</span>);     <span class="comment"># thwas was string example....wow!!! thwas was really string</span></span><br><span class="line"><span class="keyword">print</span> str.replace(<span class="string">"is"</span>, <span class="string">"was"</span>, <span class="number">3</span>);  <span class="comment"># thwas was string example....wow!!! thwas is really string</span></span><br><span class="line"><span class="comment"># str.expandtabs(tabsize=8)</span></span><br><span class="line"><span class="comment"># 把字符串中的 tab 符号('\t')转为空格，tab 符号('\t')默认的空格数是 8</span></span><br></pre></td></tr></table></figure><h5 id="检测字符串组成"><a href="#检测字符串组成" class="headerlink" title="检测字符串组成"></a>检测字符串组成</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检测数字</span></span><br><span class="line">str.isdigit()    <span class="comment"># 检测字符串是否只由数字组成</span></span><br><span class="line">str.isnumeric()  <span class="comment"># 检测字符串是否只由数字组成,这种方法是只针对unicode对象</span></span><br><span class="line">str.isdecimal()  <span class="comment"># 检查字符串是否只包含十进制字符。这种方法只存在于unicode对象</span></span><br><span class="line"><span class="comment"># 检测字母</span></span><br><span class="line">str.isalpha()   <span class="comment"># 检测字符串是否只由字母组成</span></span><br><span class="line"><span class="comment"># 检测字母和数字</span></span><br><span class="line">str.isalnum()   <span class="comment"># 检测字符串是否由字母和数字组成</span></span><br><span class="line"><span class="comment"># 检测其他</span></span><br><span class="line">str.isspace()   <span class="comment"># 检测字符串是否只由空格组成</span></span><br><span class="line">str.islower()   <span class="comment"># 检测字符串是否由小写字母组成</span></span><br><span class="line">str.isupper()   <span class="comment"># 检测字符串中所有的字母是否都为大写</span></span><br><span class="line">str.istitle()   <span class="comment"># 检测字符串中所有的单词拼写首字母是否为大写，且其他字母为小写</span></span><br></pre></td></tr></table></figure><h5 id="字符串处理"><a href="#字符串处理" class="headerlink" title="字符串处理"></a>字符串处理</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">str.capitalize()   <span class="comment"># 将字符串的第一个字母变成大写,其他字母变小写</span></span><br><span class="line">str.lower()        <span class="comment"># 转换字符串中所有大写字符为小写</span></span><br><span class="line">str.upper()        <span class="comment"># 将字符串中的小写字母转为大写字母</span></span><br><span class="line">str.swapcase()     <span class="comment"># 对字符串的大小写字母进行转换</span></span><br><span class="line">max(str)    <span class="comment"># 返回字符串 str 中最大的字母</span></span><br><span class="line">min(str)    <span class="comment"># 返回字符串 str 中最小的字母</span></span><br><span class="line">len(str)    <span class="comment"># 返回字符串的长度</span></span><br><span class="line">str(arg) <span class="comment"># 将 arg 转换为 string</span></span><br></pre></td></tr></table></figure><h4 id="7-格式化输出"><a href="#7-格式化输出" class="headerlink" title="7.格式化输出"></a>7.格式化输出</h4><h5 id="居中填充"><a href="#居中填充" class="headerlink" title="居中填充"></a>居中填充</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># str.center(width[, fillchar])</span></span><br><span class="line"><span class="comment"># 返回一个原字符串居中,并使用空格填充至长度 width 的新字符串。默认填充字符为空格</span></span><br><span class="line">str = <span class="string">"this is string example....wow!!!"</span></span><br><span class="line"><span class="keyword">print</span> str.center(<span class="number">40</span>, <span class="string">'a'</span>)   <span class="comment"># aaaathis is string  example....wow!!!aaaa</span></span><br></pre></td></tr></table></figure><h5 id="靠右填充"><a href="#靠右填充" class="headerlink" title="靠右填充"></a>靠右填充</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># str.zfill(width)</span></span><br><span class="line"><span class="comment"># 返回指定长度的字符串，原字符串右对齐，前面填充0</span></span><br><span class="line">str = <span class="string">"this is string example....wow!!!"</span></span><br><span class="line"><span class="keyword">print</span> str.zfill(<span class="number">40</span>)   <span class="comment"># 00000000this is string example....wow!!!</span></span><br></pre></td></tr></table></figure><h5 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> <span class="string">"My name is %s and weight is %d kg!"</span> % (<span class="string">'Zara'</span>, <span class="number">21</span>)</span><br><span class="line"><span class="comment"># My name is Zara and weight is 21 kg!</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'%(language)s has %(number)03d quote types.'</span> % &#123;<span class="string">"language"</span>: <span class="string">"Python"</span>, <span class="string">"number"</span>: <span class="number">2</span>&#125;</span><br><span class="line"><span class="comment"># Python has 002 quote types.</span></span><br><span class="line"><span class="comment"># str.format(*args, **kwargs)</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'&#123;0&#125;, &#123;1&#125;, &#123;2&#125;'</span>.format(<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>)  <span class="comment"># a, b, c</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'&#123;1&#125;, &#123;0&#125;, &#123;2&#125;'</span>.format(<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>)  <span class="comment"># b, a, c</span></span><br></pre></td></tr></table></figure><h2 id="3-一些小Tips"><a href="#3-一些小Tips" class="headerlink" title="3.一些小Tips"></a>3.一些小Tips</h2><h4 id="1-共用内存的对象"><a href="#1-共用内存的对象" class="headerlink" title="1.共用内存的对象"></a>1.共用内存的对象</h4><p>每个对象被创建出来的时候，就会确定其Id标识，也就是给它分配内存地址。通常来说，新对象的内存地址也是新的，会从未分配的可用地址中取。</p><p>但是，为了提高内存利用效率，对于一些常用的对象，如一些数值较小的数字对象、布尔值对象、None对象、较短的字符串对象等等，python采取共用对象内存的分配策略。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 新分配内存地址的例子</span></span><br><span class="line">ww=[<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">ee=[<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">id(ww)==id(ee) &gt;&gt;&gt;<span class="literal">False</span></span><br><span class="line">a=<span class="number">2018</span></span><br><span class="line">b=<span class="number">2018</span></span><br><span class="line">id(a)==id(b) &gt;&gt;&gt;<span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 共用内存地址的例子</span></span><br><span class="line">a=<span class="number">100</span></span><br><span class="line">b=<span class="number">100</span></span><br><span class="line">id(a)==id(b) &gt;&gt;&gt;<span class="literal">True</span></span><br><span class="line">f1=<span class="literal">True</span></span><br><span class="line">f2=<span class="literal">True</span></span><br><span class="line">id(f1)==id(f2) &gt;&gt;&gt;<span class="literal">True</span></span><br><span class="line">n1=<span class="literal">None</span></span><br><span class="line">n2=<span class="literal">None</span></span><br><span class="line">id(n1)==id(n2) &gt;&gt;&gt;<span class="literal">True</span></span><br><span class="line">s=<span class="string">"python_cat"</span></span><br><span class="line">t=<span class="string">"python_cat"</span></span><br><span class="line">id(s)==id(t) &gt;&gt;&gt;<span class="literal">True</span></span><br></pre></td></tr></table></figure><p>这就意味着，有一些变量，运行环境早早就为它们分配好了内存地址，一旦要创建新的对象时，先去已有的查找，有Type和Value相等的对象，则新对象不分配新的内存空间，而是指向已有对象。使得我们不需要频繁创建这些对象，既能提高已分配内存的使用率，又减少了创建对象、分配新内存的损耗。</p><blockquote><p>Python中，对于整数对象，如果其值处于[-5,256]的闭区间内（小整数池），则值相同的对象是同一个对象。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编译对字符串拼接的影响</span></span><br><span class="line">s1 = <span class="string">"hell"</span></span><br><span class="line">s2 = <span class="string">"hello"</span></span><br><span class="line"><span class="string">"hell"</span> + <span class="string">"o"</span> <span class="keyword">is</span> s2 &gt;&gt;&gt;<span class="literal">True</span></span><br><span class="line">s1 + <span class="string">"o"</span> <span class="keyword">is</span> s2 &gt;&gt;&gt;<span class="literal">False</span></span><br><span class="line"><span class="comment"># "hell" + "o"在编译时变成了"hello"，</span></span><br><span class="line"><span class="comment"># 而s1+"o"因为s1是一个变量，在运行时才拼接，所以没有被intern</span></span><br></pre></td></tr></table></figure><blockquote><p>Python中，字符串使用Intern机制实现内存地址共用，长度不超过20，且仅包括下划线、数字、字母的字符串才会被intern；涉及字符串拼接时，编译期优化结果会与运行期计算结果不同。</p></blockquote><h4 id="2-isinstance-和-type-的区别："><a href="#2-isinstance-和-type-的区别：" class="headerlink" title="2.isinstance 和 type 的区别："></a>2.isinstance 和 type 的区别：</h4><ul><li>type()不会认为子类是一种父类类型。</li><li>isinstance()会认为子类是一种父类类型。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">pass</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(A)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">pass</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(A(), A)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(A()) == A </span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(B(), A)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(B()) == A</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure><h4 id="3-大整数对象池"><a href="#3-大整数对象池" class="headerlink" title="3.大整数对象池"></a>3.大整数对象池</h4><p>在交互式终端环境中，每次创建大型数时都是去申请新的内存空间。但是在编写Python文件时每次运行都把代码加载到内存中，整个项目代码都属于一个整体。这时就是大型整数对象池发挥作用的时候了，它把处于相同代码块的所有等值的大型整数变量都处理为一个对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(object)</span>:</span></span><br><span class="line">    a = <span class="number">100</span></span><br><span class="line">    b = <span class="number">100</span></span><br><span class="line">    c = <span class="number">1000</span></span><br><span class="line">    d = <span class="number">1000</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(object)</span>:</span></span><br><span class="line">    a = <span class="number">100</span></span><br><span class="line">    b = <span class="number">1000</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(A.a <span class="keyword">is</span> A.b)  <span class="comment"># True</span></span><br><span class="line">print(A.a <span class="keyword">is</span> B.a)  <span class="comment"># True</span></span><br><span class="line">print(A.c <span class="keyword">is</span> A.d)  <span class="comment"># True</span></span><br><span class="line">print(A.b <span class="keyword">is</span> B.b)  <span class="comment"># False</span></span><br></pre></td></tr></table></figure><h4 id="4-内存管理"><a href="#4-内存管理" class="headerlink" title="4.内存管理"></a>4.内存管理</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>id([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]) == id([<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>])</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(id(a), id(b))</span><br><span class="line"><span class="number">2037326252488</span> <span class="number">2037326229256</span></span><br></pre></td></tr></table></figure><p>Python会实时销毁没有引用计数的对象。一旦在内存中创建了一个对象但是没有为其添加引用计数，该段代码执行完后就会回收地址，在这个例子中计算完[1,2,3]的id后list被销毁，计算右边的id时list实时创建，复用了左边list用过的内存。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第一周学习——Python环境搭建及基本数据类型&quot;&gt;&lt;a href=&quot;#第一周学习——Python环境搭建及基本数据类型&quot; class=&quot;headerlink&quot; title=&quot;第一周学习——Python环境搭建及基本数据类型&quot;&gt;&lt;/a&gt;第一周学习——Python环
      
    
    </summary>
    
      <category term="人工智能" scheme="http://yoursite.com/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2019/08/30/hello-world/"/>
    <id>http://yoursite.com/2019/08/30/hello-world/</id>
    <published>2019-08-30T09:27:48.660Z</published>
    <updated>2019-08-30T09:27:48.660Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
